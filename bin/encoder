#!/usr/bin/env perl

use Modern::Perl;
use Capture::Tiny   qw( capture_merged );
use IO::All         -utf8;
use Media;
use Getopt::Long    qw( :config bundling );
use Pod::Usage;
use Time::Elapsed   qw( elapsed );
use Term::ANSIColor;

use constant OPTIONS   => qw(
    config|c=s
      help|h
);
use constant SIG_CHECK => 0;
use constant SIG_KILL  => 9;
use constant SIG_STOP  => 17;
use constant SIG_CONT  => 19;
use constant MEGABYTE  => 1024 * 1024;
use constant GIGABYTE  => 1024 * 1024 * 1024;



my %option   = get_options_or_exit();
my $media    = Media->new( $option{'config'} );
my $argument = shift // 'run';

given ( $argument ) {
    when ( 'run'    )   { run_encoder();    }
    
    when ( 'stop'   )   { stop_encoder();   }
    when ( 'abort'  )   { abort_encoder();  }
    
    when ( 'pause'  )   { pause_encoder();  }
    when ( 'resume' )   { resume_encoder(); }
    
    default             { die "Uknown argument: $argument\n"; }
}
exit;


sub run_encoder {
    setpriority 0, $$, 20;
    $$ > io $media->encoder_pid_file;
    
    my $running = 1;
    while ( $running ) {
        my( $job, $payload ) = $media->next_queue_job();
        
        if ( defined $payload->{'stop_encoder'} ) {
            log_action( 'stop job received -- quitting' );
            $running = 0;
        }
        else {
            pause_if_low_disk_space();
            
            my $start = time();
            log_action( '"' . $payload->{'name'} . '" starting' );
            
            my $done = $media->encode_media( $payload );
            if ( !defined $done ) {
                log_action( '"' . $payload->{'name'} . "\" disappeared" );
            }
            else {
                my $elapsed = time() - $start;
                my $hours   = int( $elapsed / 3600 );
                my $minutes = int( ($elapsed - ($hours * 3600)) / 60 );
                my $seconds = $elapsed - ($hours * 3600) - ($minutes * 60);
                my $taken   = sprintf "%d:%02d:%02d\n",
                                  $hours, $minutes, $seconds;
                
                log_action( '"' . $payload->{'name'} . "\" took $taken" );
            }
        }
        
        $job->finish();
    }
    
    unlink $media->encoder_pid_file;
}
sub stop_encoder {
    $media->queue_stop_command();
}
sub abort_encoder {
    signal_workers( SIG_KILL );
}
sub pause_encoder {
    signal_workers( SIG_STOP );
}
sub resume_encoder {
    signal_workers( SIG_CONT );
}

sub pause_if_low_disk_space {
    my $low = lc $media->full_configuration->{''}{'low_disk_space'};
    my $dir = $media->full_configuration->{''}{'encode_directory'};
    
    return unless defined $low && $low;
    
    $low =~ m{^ (\d+) ([mg]) $}x;
    my $threshold = $1 * ( $2 eq 'm' ? MEGABYTE : GIGABYTE );

    my $df        = capture_merged { system( '/bin/df', '-k', $dir ); };
    my @lines     = split m{\n}, $df;
    my @df        = split m{\s+}, $lines[1];
    my $available = $df[3] * 1024;
    
    if ( $available < $threshold ) {
        say '';
        say colored( 'Available space below threshold, pausing.',
                     'bold red' );
        say 'Press [Return] to continue.';
        my $wait = <>;
    }
}
sub log_action {
    my $message = shift;
    
    say " -> $message";
    
    my $log = $media->full_configuration->{''}{'encoder_log_file'};
    return unless defined $log;
    
    my @time  = localtime( time() );
    my $stamp = sprintf '%02d/%02d %02d:%02d',
                     $time[4]+1,
                     @time[3,2,1];
    
    trim_to_width( "$stamp $message\n" ) >> io $log
        or die "io $log: $!";
}
sub signal_workers {
    my $signal = shift;
    
    my $pid      < io( $media->encoder_pid_file );
    my @children = get_child_processes( $pid );
    
    kill $signal, @children;
}
sub get_child_processes {
    my $pid    = shift;
    my $signal = shift;
    
    my $process_list = io( 'ps ax -o pid,ppid' )->pipe;
    my @processes;
    
    while ( my $line = $process_list->getline ) {
        if ( $line =~ m{ (\d+) \s (\d+) }x ) {
            push @processes, $1
                if $pid == $2;
        }
    }
    
    return @processes;
}
sub get_options_or_exit {
    my %getopts = @_;
    
    my $known = GetOptions( \%getopts, OPTIONS );
    my $usage = ! $known || $getopts{'help'};
    
    pod2usage() if $usage;
    
    return %getopts;
}
sub trim_to_width {
    my $text = shift;
    
    $text = sprintf( "%s...%s",
            substr( $text, 0, 33 ),
            substr( $text, -44 ),
        ) if length $text > 80;
    
    return $text;
}

__END__

=head1 NAME

B<encoder> - queue runner for converting media

=head1 SYNOPSIS

    encoder [-c<file>] [run]
    encoder stop
    encoder abort
    encoder pause
    encoder resume

=head1 OPTIONS

=over

=item -cI<file>, --config I<file>

Use I<file> as the configuration file to control the behaviour of C<queue>.
Can also be set with the C<MEDIA_CONFIG> environment variable. Defaults to
F<~/etc/media.conf>.

=back

=head1 SEE ALSO

=over

=item *

perldoc queue

=item *

perldoc Media::Tutorial

=item *

perldoc Media::Config

=back

=head1 AUTHOR

Mark Norman Francis, L<norm@cackhanded.net>.

=head1 COPYRIGHT AND LICENSE

Copyright 2011 Mark Norman Francis.

This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
